Diagrama de classes
	Uso de orientação a objetos
	Facilita para visualizar a estrutura do projeto
	Visualizar e entender
	Oportunidades de reutilização de código
	
Framework
	conjunto de bibliotecas, coisas prontas
	que já vem com ferramentas, partes, componentes reutilizáveis
	assim acelerando o desenvolvimento
	
	com isso apenas nos preocupamos com a lógica de negócios e não
		com a tecnologia
	
	Temos frameworks de ágil, desenvolvimento etc.
	
	Spring -> framework java de desenvolvimento
		torna as coisas feitas configuráveis, ao invés de deixar algo
			já pronto e fixo
		
		usa Maven -> gerenciador de pacotes
			semver.org -> versionamento semântico, igual para todos
				MAJOR.MINOR.PATCH
				PATCH -> versão de correção, mantém a compatibilidade
				MINOR -> adicionar funcionalidades mantendo compatibilidade
				MAJOR -> mudanças incompatíveis na API
			tendo o versionamento ele sabe controlar isso
			trabalha com um .xml com o pacote e versão dele
			na hora de compilar o maven baixa as dependências e pacotes necessários na versão correta
	
		Inversão de dependências
			injeção de dependências
			Apenas pedimos uma classe e a classe correta chega lá
			Ideia de interface, tem várias implementações, ele dá a correta
			
		Spring já vem com um servidor autoimbutido
		Só de rodar o jar já 
		
		Jboss é um pacote que podemos instalar
		
		Camadas de aplicação Web:
			Apresentação, Business, DAO, Model
			O spring trás vários projetos separados para cada
			Isso permite gerar pacotes de cada camada e reutilizar elas
			
			Model -> Classes do negócio, com seus métodos e regras
			DAO -> data access object -> entidade do banco de dados
			Business Layer -> tem classes capazes de interagir com DAO e converter
				em classes Model, de negócio
				Sabe tratar regras de negócio, sabe interagir com Models
			Apresentação -> API/Front
				Controller -> Recebe as requests, sabe o que chamar, o que fazer
				View -> Formatação, apresentação, response

		Pattern Arquitetural - MVC
			Model - View - Controller
			Padrão que divide em três camadas
			
			View interage com Controller e Model
			Controller sabe receber as requisições e rotear para as Models corretas, sabe retornar as Views corretas
			
			Faz muito sentido em projetos menores, fica tudo em um único projeto
			Quando cresce começa a ficar confuso, começa a ser necessária uma estrutura maior
		
		Spring MVC
			por baixo dos panos trata os servlets, sabe contruir as classes
				a partir dos parâmetros etc.
			sabe tratar mapeamentos etc.
			
			ORM -> Object Relational Mapping
				Criamos uma classe com as propriedades
				E existem anotações para mapear elas com o respectivo no banco
				Nisso ele vai saber converter sozinho etc.
				Sabe criar a estrutura a partir disso (DDL)
				Sabe fazer os DMLs
			
				tradeoffs -> tem essas vantagens, mas abrimos mão de ter controle
					de como montamos as queries, como montar dml etc.
					precisamos trabalhar nas diretivas deles
			
			Nisso a camada Model acaba contendo os repositórios, porque já converte