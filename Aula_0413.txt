Anotações - Design Pattern
	Forma de adicionar coisas em um pipeline
	Como se fosse um cano
	Programação Orientada a Aspecto
	Configurar algo para rodar em determinado momento
	
	Vai montando uma sequência de execução, vamos só adicionando comportamentos através de anotações
	
Spring ajuda nisso
Colocamos toda a complexidade de ficar escutando uma porta por requisições, converter e tals
O Spring faz tudo isso e vc só se preocupa com o negócio
Só anotar com @AlgumaCoisa

	Nisso é configurado para rodar algo antes/depois da sua classe rodar
	
	Middleware é um nome para isso também, roda algo antes/depois de algo
	Ex: gzip -> aparece no Accept-Encoding
	Middleware de saída
	
	Na núvem o que custa é a saída, response
	Por isso esse gzip e outros ajudam
	
	Maiores ofensores de performance: Disco, Rede e Garbage Collector
	Para gravar/ler no disco é lento, Para fazer comunicação de rede (ex: servidor da aplicação em um e o banco em outro)
	Coletor de lixo: Temos a memória Stack e Heap, objetos criados na Stack não precisam do coletor, o de Heap precisa, Coletor vai apagando objetos do Heap e devolvendo memória
		para outros processos
		Diferente do C e C++ que precisa liberar memória manualmente, Java e outras já limpam sozinho a memória, mas isso gera custo
		Enquanto coletor de lixo roda a aplicação é suspensa, Quando pensamos em milhões de requisições isso interfere
	
	Middleware de entrada Ex: 	
	Existem anotações de Cache
	Se formos buscar uma requisição de produto, e depois fazer a mesma busca, ele reutiliza do cache
	Entrega responsa mais rápido para usuário
	
	Temos cache de servidor, e cache do cliente
	Cache de cliente pode ser um problema, porque ele precisa expirar
	Cache é composto por: 
		key
		body -> binário para ser mais leve, geralmente
		TTL -> Time To Leave
	Maior desafio é saber definir o expire ideal do que você estiver fazendo, depende do negócio, da sazonalidade
	Ex: Em BlackFriday, se você deixar TTL muito grande o usuário vai ver coisa desatualizada e você vai perder muitas requisições
	
	CDN - Content Delivery Network
		geralmente são para arquivos estáticos HTML, CSS, JS, imgs
		Para responder usuários do outro lado do mundo
		Latência de 200ms ida, 200ms volta, já foi quase meio segundo
		Mais o tempo do processamento vira problema
		Usuário espera até 2s
		CDN ajuda nisso, servidor que é distribuído globalmente
		Quando usuário busca img ele vai no CDN mais próximo, se ele não tiver ele vai no servidor mais próximo e depois salva
		
		delays diferentes para assistir a mesma coisa ao vivo existe por isso, depende do caminho que vai percorrer
		
	TradeOffs - abrimos mão de algo para ter outro
	CDN entrega mais rápido, e o custo por response é economizado
	
	CDN é um nível de cache
	Tem outro nível na máquina, o navegador já salva e vc n vai nem pro CDN
	
	Problemas em SPA, vc atualiza coisa, navegador do usuário + CDN retorna coisa antiga, quebra coisa, inferno pra desenvolvedor
	
	Buscadores tem um índice
	Quando pesquisamos por algo ele consegue retornar porque tem uma URL
	SPA não tem URL, por isso sites de ecommerce não usa SPA, não vai retornar no Google
	
UUID -> ID único, muito difícil de repetir
	Mas ocupa 3 vezes o tamanho de um Long
	Como Instagram gera ids?
	
	Sharding & IDs at Instagram
		Vários bancos globalmente distribuídos com seus próprios IDs
		Quando precisar replicar ele vai movendo para outros bancos
		25 fotos e 90 likes todo segundo, hoje é mais
		
	Mas isso de ficar replicando pode gerar lentidão
	Nisso uma solução é criar o próprio tipo de ID

Para evitar expor IDs podemos mostra outro dado no lugar, ex: um GUID (UUID)

MVC
	para retornar dados a ModelView aceita atributos em formato de dicionário de dados
	Nisso vamos montando key value e isso é acessável na tela porque é retornado na requisição (Bag)

Paginação (Skip and Take)
	não saímos buscando todos os produtos de uma só vez
	as chances de não usar tudo é muito alta
	Melhor consultar menos registros mas que sei que o usuário quer, precisa
	
	Vamos acessando a partir de entradas como:
		página atual
		total de itens
		quantidade de itens por página
	Nisso você consegue montar a paginação na tela e a API entende quais dados buscar

Arquitetura
	Se for 64 bits, para comparar um UUID (128 bits) ele vai custar 2 ciclos da CPU
	Se o banco precisar ficar rodando a tabela inteira com esses IDs vai custar pro processador

Memória Cache no Banco
	Se ele tiver muita memória RAM é por isso
	Ele vai salvando em memória RAM os resultados
	Caso a consulta seja feita, vai retornar da memória RAM, não do Disco

Existem também servidores de Cache
	Ex: Redis
	Servidores com muita muita memória RAM, 500Gb etc.

Uma forma de cache é ter vários servidores de aplicação que se comunicam com um servidor de Cache parrudo
esse servidor que pede pro Banco se for necessário

