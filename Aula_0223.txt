Microserviços
	Não pode ser muito pequeno nem muito grande
	Gera custo
	O que define criar um novo serviço?
	
	Vamos pela ideia do monolito primeiro

	Caso - Aplicação de viagem
	
	Pensando em sistemas é preciso pensar em segurança também:
		Autenticação -> garantir que é quem diz ser
			2FA -> seconde factor autentication
				Você sabe a senha
				Para se autenticar preciso de algo que vc saiba e que vc tenha
				Senha + Token (Exemplo)
			MFA -> multifactor
				Sabe
				Tem
				O que você é
				Senha + Token + Biometria
		Autorização -> usuário já autenticado, mas só faz o que ele tem direito
		
		Tudo isso estaria junto de Cliente?
		Dado o tamanho ele sozinho é um microserviço
		Chamado geralmente de satélite (fica por lá)
		Pode ser que surja com os Clientes, mas depois seria separado
		
		Preciso implementar?
			Temos códigos fontes já prontos para serem usados:
				Key Cloak
				Identity Server
				Auth0 -> pago
				Google etc. 
		
		Não podemos só salvar a senha no banco
		Ela é criptografada
			Costumamos ter uma seed para ter a senha criptografada
			Essa senha criptografada (hash) é salva no banco para depois ser comparada, alguém que digite a msm coisa vai ter o mesmo hash no final
			Para proteger a seed geralmente tem o salt também
			Para ter o hash é aplicado a seed e o salt
		Isso tudo é meio que padrão
		Por isso costumamos usar algo pronto
	
		Muito ruim se autenticar em cada sistema
		SSO -> Single Sign On
			Com uma autenticação está autenticado em todos os sistemas
		
		Temos protocolos que servem para isso
		Ex: OAuth / OAuth2
				Ele mostra como vc pode fazer para se autenticar no mobile, no web etc.
				A partir dele implementamos algo na ideia anterior
				Seguindo ele você pode trocar de implementação que funciona
					
					OpenID -> retorna a informação do usuário em um Token
						JSON é criptografado e contém determinadas propriedades
					
						JWT -> JSON Web Token
	
	IAAS -> Infraestrutura como Serviço
		Amazon
			Blackfriday -> compra muito hardware
			Depois fica ocioso
			Nisso nasce a AWS
		
		Como vender o processamento?
			Vender máquinas virtuais
		
		Quem compra não se preocupa com a máquina física, conexão com a rede
	PAAS -> Plataforma como Serviço
		E se eu só precisar do banco de dados?
		Não tem como comprar algo já configurado com isso?
		
		Nesse caso você não se preocupa com SO, CPU, Aquecimento etc.
	SAAS -> Software como Serviço
		Ex: Gmail, Office 365, Spotify, Netflix, SAP etc.
		Outros exemplos: Banco de dados, etc.
	FAAS -> Função como serviço
		Não quero uma máquina só para isso
		
		Faz o deploy de um método só e vc é cobrado pela CPU, memória, "quantidades de usos"
		Cobra por milhão de execução etc.
	
	Auth0 -> SAAS
		Contratamos um software e ele nos entrega isso já pronto
	
	https://12factor.net/pt_br/ -> site com padrões
	
	API Gateway
	BFF -> Backend For Frontend
		Exclusivo do site
		Tela se comunica com ele e ele sabe puxar do lugar certo
		Nisso o front não se preocupa mais em cache, chamar de vários lugares diferentes etc.
	
	Analytics -> dados de busca, preferências, o que ele já comprou
	Firebase -> email 
	
	Hoje em dia temos diversos serviços que podem ser usados e não precisamos implementar tudo de novo
	
	
Intercâmbio de informações
	Como as coisas se comunicam e se entendem mesmo sendo de lugares diferentes etc.
	
	A comunicação geralmente:
		Client side - Web - Server side
		
	Cliente manda request e Server retorna uma response
	
	Requisição -> envia ou solicita informações
	Response -> resposta para uma requisição
	
	HTTP Request
		     |-> URL
		método scheme server          path             query string
		GET https://www.server.com/api/orders.json?created_at=2022-01-18T19:0:48+00:00&limit=10 
		Headers:
			HTTP/1.1
			Host: www.server.com
			authorization: Basic DwWaadiawdpdnadnwadmawpd=
		Body -> geralmente um JSON com os dados da requisição
	
	(DNS -> nem sempre aponta para o servidor direto, costuma apontar para um firewall antes para evitar DDoS)
	(nslookup fiap.com.br -> mostra vários endereços, isso porque os serviços de firewall costumam estar replicados mundialmente)
	
	HTTP Response
		Response Code & Description: 200 OK
		Headers:
			Content-Type: application/json
			Date: ...
			Server: Apache
			X-Correlation-Id: ... -> junta as várias requisições que podem ter rodado internamente, ele vai trafegando junto e facilita rastrear depois
		Response -> json com os dados
	
	HTTP Status codes
		São de 3 dígitos e separados por família
		
		1xx -> informação, nada de muito especial
		2xx -> bem-sucedido
			200 -> OK
			201 -> Criado com sucesso
			204 -> Deu certo mas não tem conteúdo
		3xx -> redirecionamento
		4xx -> erro no lado do cliente
			404 -> recurso não existe
			401 -> não autenticado
			403 -> você não pode acessar o recurso em específico, sem permissão
		5xx -> erro do servidor
			500 -> estourou erro
	
	O que vem no GET retorna no POST também